#include "g2o/core/sparse_optimizer.h"
#include "g2o/core/block_solver.h"
#include "g2o/core/factory.h"
#include "g2o/core/optimization_algorithm_levenberg.h"
#include "g2o/solvers/csparse/linear_solver_csparse.h"

#include "g2o/types/slam3d/vertex_se3.h"
#include "g2o/core/base_binary_edge.h"
#include "g2o/core/base_vertex.h"

#include "g2o/types/slam2d/vertex_point_xy.h"

#include <iostream>

using namespace std;
using namespace g2o;

class MyVertexXY : public BaseVertex <2, Eigen::Vector2d>
{
    public:
        EIGEN_MAKE_ALIGNED_OPERATOR_NEW
            //MyVertexXY()
            //{

            //}

        MyVertexXY():BaseVertex <2, Eigen::Vector2d>()
        {
        }

        bool read(std::istream& is)
        {
return true;
        }

        bool write(std::ostream& os) const
        {
        return false;
        }

        void setToOriginImpl()
        {
            _estimate.setZero();
        }

        void oplusImpl(const number_t* update)
        {
            _estimate[0] += update[0];
            _estimate[1] += update[1];
        }

};

class MyBinaryEdge : public BaseBinaryEdge <1, Eigen::Matrix<double, 1, 1, 0, 1, 1>, MyVertexXY, MyVertexXY>
{
    public:
        void computeError()
        {
            const MyVertexXY* v1 = static_cast<const MyVertexXY*>(_vertices[0]);
            Eigen::Vector2d myEstimate1 = v1->estimate();

            const MyVertexXY* v2 = static_cast<const MyVertexXY*>(_vertices[1]);
            Eigen::Vector2d myEstimate2 = v2->estimate();

            cout<<"myEstimate1 = "<<myEstimate1<<endl;
            cout<<"myEstimate2 = "<<myEstimate2<<endl;
            cout<<"_measurement = "<<_measurement<<endl;



            _error = _measurement;// - ((myEstimate1[0]-myEstimate2[0])*(myEstimate1[0]-myEstimate2[0]) + (myEstimate1[1]-myEstimate2[1])*(myEstimate1[1]-myEstimate2[1]));

            //_error = Eigen::VectorXd(_error_d);

            //_error = 0;

        }


};

#define MAXITERATION 50
int main()
{

    cout<<"Helllo g2o four points example"<<endl;



    // create the linear solver
    std::unique_ptr<BlockSolverX::LinearSolverType> linearSolver(new LinearSolverCSparse<BlockSolverX::PoseMatrixType>());

    // create the block solver on the top of the linear solver
    std::unique_ptr<BlockSolverX> blockSolver(new BlockSolverX(std::move(linearSolver)));

    //create the algorithm to carry out the optimization
    OptimizationAlgorithmLevenberg* optimizationAlgorithm = new OptimizationAlgorithmLevenberg(std::move(blockSolver));


    // create the optimizer
    // allocating the optimizer
    SparseOptimizer optimizer;

    optimizer.setAlgorithm(optimizationAlgorithm);

    // adding the odometry to the optimizer
    // first adding all the vertices
    cerr << "Optimization: Adding robot poses ... "<<endl;

    MyVertexXY* v = new MyVertexXY();

    //BaseVertex<2, Eigen::Vector2d>* b = new BaseVertex<2, Eigen::Vector2d>;
    //VertexPointXY* landmark = new VertexPointXY;

    //v->setId(1);
    //v->setEstimate(Eigen::Vector2d(0.5,0.4));
    //optimizer.addVertex(v);
    //

    //v->setId(2);
    //v->setEstimate(Eigen::Vector2d(0.52,0.4));
    //optimizer.addVertex(v);
    //cerr << "done." << endl;


    //v->setId(3);
    //v->setEstimate(Eigen::Vector2d(0.53,0.4));
    //optimizer.addVertex(v);



    //v->setId(4);
    //v->setEstimate(Eigen::Vector2d(0.55,0.4));
    //optimizer.addVertex(v);

    return 0;
}
